{"version":3,"sources":["getStateFromPath.tsx"],"names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","parse","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","segments","shift","state","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","value","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","parseConfig","query"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,cAA7B;AAMA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,gBAAT,CACbC,IADa,EAEbC,OAFa,EAGY;AACzB,QAAM,CAACC,MAAD,EAASC,aAAT,IAA0BL,qBAAqB,CAACG,OAAD,CAArD;AAEA,MAAIG,aAAmC,GAAG,EAA1C;;AAEA,MAAID,aAAJ,aAAIA,aAAJ,eAAIA,aAAa,CAAEE,gBAAnB,EAAqC;AACnCD,IAAAA,aAAa,CAACE,IAAd,CAAmB;AACjBD,MAAAA,gBAAgB,EAAEF,aAAa,CAACE,gBADf;AAEjBE,MAAAA,aAAa,EAAE;AAFE,KAAnB;AAID;;AAED,QAAMC,OAAO,GAAGL,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEK,OAA/B;AAEA,MAAIC,SAAS,GAAGT,IAAI,CACjBU,OADa,CACL,MADK,EACG,GADH,EACQ;AADR,GAEbA,OAFa,CAEL,KAFK,EAEE,EAFF,EAEM;AAFN,GAGbA,OAHa,CAGL,OAHK,EAGI,EAHJ,CAAhB,CAdyB,CAiBA;AAEzB;;AACAD,EAAAA,SAAS,GAAGA,SAAS,CAACE,QAAV,CAAmB,GAAnB,IAA0BF,SAA1B,aAAyCA,SAAzC,MAAZ;;AAEA,MAAID,OAAO,KAAKI,SAAhB,EAA2B;AACzB;AACA,UAAMC,MAAM,GAAGJ,SAAS,CACrBK,KADY,CACN,GADM,EAEZC,MAFY,CAELC,OAFK,EAGZC,GAHY,CAGR,CAACC,OAAD,EAAUC,CAAV,EAAaC,IAAb,KAAsB;AACzB,YAAMC,IAAI,GAAGC,kBAAkB,CAACJ,OAAD,CAA/B;;AAEA,UAAIC,CAAC,KAAKC,IAAI,CAACG,MAAL,GAAc,CAAxB,EAA2B;AACzB,eAAO;AAAEF,UAAAA,IAAF;AAAQG,UAAAA,MAAM,EAAEC,gBAAgB,CAACzB,IAAD;AAAhC,SAAP;AACD;;AAED,aAAO;AAAEqB,QAAAA;AAAF,OAAP;AACD,KAXY,CAAf;;AAaA,QAAIR,MAAM,CAACU,MAAX,EAAmB;AACjB,aAAOG,uBAAuB,CAACb,MAAD,EAAST,aAAT,CAA9B;AACD;;AAED,WAAOQ,SAAP;AACD,GA1CwB,CA4CzB;;;AACA,QAAMe,OAAO,GAAI,EAAD,CACbC,MADa,CAEZ,GAAGC,MAAM,CAACC,IAAP,CAAYtB,OAAZ,EAAqBS,GAArB,CAA0Bc,GAAD,IAC1BC,uBAAuB,CACrB9B,MADqB,EAErB6B,GAFqB,EAGrBvB,OAHqB,EAIrB,EAJqB,EAKrBJ,aALqB,EAMrB,EANqB,CADtB,CAFS,EAab6B,IAba,CAaR,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd;AACA;AACA;AAEA;AACA;AACA,QAAID,CAAC,CAACE,OAAF,KAAcD,CAAC,CAACC,OAApB,EAA6B;AAC3B,aAAOD,CAAC,CAACE,UAAF,CAAaC,IAAb,CAAkB,GAAlB,EAAuBC,aAAvB,CAAqCL,CAAC,CAACG,UAAF,CAAaC,IAAb,CAAkB,GAAlB,CAArC,CAAP;AACD,KATa,CAWd;AACA;;;AACA,QAAIJ,CAAC,CAACE,OAAF,CAAUI,UAAV,CAAqBL,CAAC,CAACC,OAAvB,CAAJ,EAAqC;AACnC,aAAO,CAAC,CAAR;AACD;;AAED,QAAID,CAAC,CAACC,OAAF,CAAUI,UAAV,CAAqBN,CAAC,CAACE,OAAvB,CAAJ,EAAqC;AACnC,aAAO,CAAP;AACD;;AAED,UAAMK,MAAM,GAAGP,CAAC,CAACE,OAAF,CAAUtB,KAAV,CAAgB,GAAhB,CAAf;AACA,UAAM4B,MAAM,GAAGP,CAAC,CAACC,OAAF,CAAUtB,KAAV,CAAgB,GAAhB,CAAf;AAEA,UAAM6B,cAAc,GAAGF,MAAM,CAACG,OAAP,CAAe,GAAf,CAAvB;AACA,UAAMC,cAAc,GAAGH,MAAM,CAACE,OAAP,CAAe,GAAf,CAAvB,CAzBc,CA2Bd;;AACA,QAAID,cAAc,KAAK,CAAC,CAApB,IAAyBE,cAAc,KAAK,CAAC,CAAjD,EAAoD;AAClD,aAAO,CAAC,CAAR;AACD;;AAED,QAAIF,cAAc,KAAK,CAAC,CAApB,IAAyBE,cAAc,KAAK,CAAC,CAAjD,EAAoD;AAClD,aAAO,CAAP;AACD;;AAED,QAAIF,cAAc,KAAKE,cAAvB,EAAuC;AACrC;AACA;AACA,aAAOH,MAAM,CAACnB,MAAP,GAAgBkB,MAAM,CAAClB,MAA9B;AACD,KAxCa,CA0Cd;AACA;;;AACA,WAAOsB,cAAc,GAAGF,cAAxB;AACD,GA1Da,CAAhB,CA7CyB,CAyGzB;;AACAhB,EAAAA,OAAO,CAACmB,MAAR,CAA4C,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC3D,QAAID,GAAG,CAACC,MAAM,CAACZ,OAAR,CAAP,EAAyB;AACvB,YAAMF,CAAC,GAAGa,GAAG,CAACC,MAAM,CAACZ,OAAR,CAAH,CAAoBC,UAA9B;AACA,YAAMF,CAAC,GAAGa,MAAM,CAACX,UAAjB,CAFuB,CAIvB;AACA;;AACA,YAAMY,UAAU,GACdf,CAAC,CAACX,MAAF,GAAWY,CAAC,CAACZ,MAAb,GACIY,CAAC,CAACe,KAAF,CAAQ,CAACC,EAAD,EAAKhC,CAAL,KAAWe,CAAC,CAACf,CAAD,CAAD,KAASgC,EAA5B,CADJ,GAEIjB,CAAC,CAACgB,KAAF,CAAQ,CAACC,EAAD,EAAKhC,CAAL,KAAWgB,CAAC,CAAChB,CAAD,CAAD,KAASgC,EAA5B,CAHN;;AAKA,UAAI,CAACF,UAAL,EAAiB;AACf,cAAM,IAAIG,KAAJ,yEAEFJ,MAAM,CAACZ,OAFL,iCAGmBF,CAAC,CAACI,IAAF,CAAO,KAAP,CAHnB,oBAG0CH,CAAC,CAACG,IAAF,CAC5C,KAD4C,CAH1C,4EAAN;AAOD;AACF;;AAED,WAAOT,MAAM,CAACwB,MAAP,CAAcN,GAAd,EAAmB;AACxB,OAACC,MAAM,CAACZ,OAAR,GAAkBY;AADM,KAAnB,CAAP;AAGD,GA1BD,EA0BG,EA1BH;;AA4BA,MAAIvC,SAAS,KAAK,GAAlB,EAAuB;AACrB;AACA;AACA,UAAM6C,KAAK,GAAG3B,OAAO,CAAC4B,IAAR,CACXP,MAAD,IACEA,MAAM,CAAChD,IAAP,KAAgB,EAAhB,IACAgD,MAAM,CAACX,UAAP,CAAkBa,KAAlB,EACE;AACC7B,IAAAA,IAAD;AAAA;;AAAA,aAAU,mBAACM,OAAO,CAAC4B,IAAR,CAAcC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAapC,IAAjC,CAAD,0CAAC,cAAwCrB,IAAzC,CAAV;AAAA,KAFF,CAHU,CAAd;;AASA,QAAIsD,KAAJ,EAAW;AACT,aAAO5B,uBAAuB,CAC5B4B,KAAK,CAACjB,UAAN,CAAiBpB,GAAjB,CAAqB,CAACI,IAAD,EAAOF,CAAP,EAAUC,IAAV,KAAmB;AACtC,YAAID,CAAC,KAAKC,IAAI,CAACG,MAAL,GAAc,CAAxB,EAA2B;AACzB,iBAAO;AAAEF,YAAAA,IAAF;AAAQG,YAAAA,MAAM,EAAEC,gBAAgB,CAACzB,IAAD,EAAOsD,KAAK,CAACI,KAAb;AAAhC,WAAP;AACD;;AAED,eAAO;AAAErC,UAAAA;AAAF,SAAP;AACD,OAND,CAD4B,EAQ5BjB,aAR4B,CAA9B;AAUD;;AAED,WAAOQ,SAAP;AACD;;AAED,MAAI+C,MAAJ;AACA,MAAIC,OAAJ;;AAEA,MAAI1D,MAAM,KAAK,KAAf,EAAsB;AACpB;AACA;AACA,UAAM;AAAEW,MAAAA,MAAF;AAAUgD,MAAAA;AAAV,QAA4BC,mBAAmB,CACnDrD,SADmD,EAEnDkB,OAAO,CAACV,GAAR,CAAauC,CAAD,KAAQ,EAClB,GAAGA,CADe;AAElB;AACAO,MAAAA,KAAK,EAAEP,CAAC,CAACO,KAAF,GAAU,IAAIC,MAAJ,CAAWR,CAAC,CAACO,KAAF,CAAQE,MAAR,GAAiB,GAA5B,CAAV,GAA6CrD;AAHlC,KAAR,CAAZ,CAFmD,CAArD;;AASA,QAAIC,MAAM,KAAKD,SAAf,EAA0B;AACxB;AACAgD,MAAAA,OAAO,GAAGlC,uBAAuB,CAACb,MAAD,EAAST,aAAT,CAAjC;AACAK,MAAAA,SAAS,GAAGoD,aAAZ;AACAF,MAAAA,MAAM,GAAGC,OAAT;AACD;AACF,GAlBD,MAkBO;AACL;AACA;AACA,WAAOnD,SAAP,EAAkB;AAChB,UAAI;AAAEI,QAAAA,MAAF;AAAUgD,QAAAA;AAAV,UAA4BC,mBAAmB,CAACrD,SAAD,EAAYkB,OAAZ,CAAnD;AAEAlB,MAAAA,SAAS,GAAGoD,aAAZ,CAHgB,CAKhB;;AACA,UAAIhD,MAAM,KAAKD,SAAf,EAA0B;AACxB,cAAMsD,QAAQ,GAAGzD,SAAS,CAACK,KAAV,CAAgB,GAAhB,CAAjB;AAEAD,QAAAA,MAAM,GAAG,CAAC;AAAEQ,UAAAA,IAAI,EAAEC,kBAAkB,CAAC4C,QAAQ,CAAC,CAAD,CAAT;AAA1B,SAAD,CAAT;AACAA,QAAAA,QAAQ,CAACC,KAAT;AACA1D,QAAAA,SAAS,GAAGyD,QAAQ,CAAC5B,IAAT,CAAc,GAAd,CAAZ;AACD;;AAED,YAAM8B,KAAK,GAAG1C,uBAAuB,CAACb,MAAD,EAAST,aAAT,CAArC;;AAEA,UAAIwD,OAAJ,EAAa;AAAA;;AACX;AACA,2BAAOA,OAAP,qCAAO,SAAS/C,MAAT,CAAgB+C,OAAO,CAACS,KAAR,IAAiB,CAAjC,EAAoCD,KAA3C,EAAkD;AAAA;;AAChDR,UAAAA,OAAO,GAAGA,OAAO,CAAC/C,MAAR,CAAe+C,OAAO,CAACS,KAAR,IAAiB,CAAhC,EAAmCD,KAA7C;AACD;;AAEAR,QAAAA,OAAD,CAA2C/C,MAA3C,CACE,cAAA+C,OAAO,UAAP,8CAASS,KAAT,KAAkB,CADpB,EAEED,KAFF,GAEUA,KAFV;AAGD,OATD,MASO;AACLT,QAAAA,MAAM,GAAGS,KAAT;AACD;;AAEDR,MAAAA,OAAO,GAAGQ,KAAV;AACD;AACF;;AAED,MAAIR,OAAO,IAAI,IAAX,IAAmBD,MAAM,IAAI,IAAjC,EAAuC;AACrC,WAAO/C,SAAP;AACD;;AAED,QAAM0D,KAAK,GAAGC,gBAAgB,CAACX,OAAD,CAA9B;AACA,QAAMpC,MAAM,GAAGC,gBAAgB,CAC7BzB,IAD6B,EAE7BwE,uBAAuB,CAACF,KAAK,CAACjD,IAAP,EAAaM,OAAb,CAFM,CAA/B;;AAKA,MAAIH,MAAJ,EAAY;AACV;AACA8C,IAAAA,KAAK,CAAC9C,MAAN,GAAe,EAAE,GAAG8C,KAAK,CAAC9C,MAAX;AAAmB,SAAGA;AAAtB,KAAf;AACD;;AAED,SAAOmC,MAAP;AACD;;AAED,MAAMc,SAAS,GAAG,CAAC,GAAGC,KAAJ,KACf,EAAD,CACG9C,MADH,CACU,GAAG8C,KAAK,CAACzD,GAAN,CAAW0D,CAAD,IAAOA,CAAC,CAAC7D,KAAF,CAAQ,GAAR,CAAjB,CADb,EAEGC,MAFH,CAEUC,OAFV,EAGGsB,IAHH,CAGQ,GAHR,CADF;;AAMA,MAAMwB,mBAAmB,GAAG,CAACrD,SAAD,EAAoBkB,OAApB,KAA+C;AACzE,MAAId,MAAJ;AACA,MAAIgD,aAAa,GAAGpD,SAApB,CAFyE,CAIzE;;AACA,OAAK,MAAMuC,MAAX,IAAqBrB,OAArB,EAA8B;AAC5B,QAAI,CAACqB,MAAM,CAACe,KAAZ,EAAmB;AACjB;AACD;;AAED,UAAMT,KAAK,GAAGO,aAAa,CAACP,KAAd,CAAoBN,MAAM,CAACe,KAA3B,CAAd,CAL4B,CAO5B;;AACA,QAAIT,KAAJ,EAAW;AAAA;;AACT,YAAMsB,aAAa,sBAAG5B,MAAM,CAACZ,OAAV,oDAAG,gBAClBtB,KADkB,CACZ,GADY,EAEnBC,MAFmB,CAEX4D,CAAD,IAAOA,CAAC,CAACnC,UAAF,CAAa,GAAb,CAFK,EAGnBM,MAHmB,CAIlB,CAACC,GAAD,EAAM4B,CAAN,EAASxD,CAAT,KACEU,MAAM,CAACwB,MAAP,CAAcN,GAAd,EAAmB;AACjB;AACA,SAAC4B,CAAD,GAAKrB,KAAK,CAAE,CAACnC,CAAC,GAAG,CAAL,IAAU,CAAZ,CAAL,CAAoBT,OAApB,CAA4B,IAA5B,EAAkC,EAAlC;AAFY,OAAnB,CALgB,EASlB,EATkB,CAAtB;AAYAG,MAAAA,MAAM,GAAGmC,MAAM,CAACX,UAAP,CAAkBpB,GAAlB,CAAuBI,IAAD,IAAU;AAAA;;AACvC,cAAM2B,MAAM,GAAGrB,OAAO,CAAC4B,IAAR,CAAcC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAapC,IAAjC,CAAf;AACA,cAAMG,MAAM,GAAGwB,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEhD,IAAX,iDAAG,aACXc,KADW,CACL,GADK,EAEZC,MAFY,CAEJ4D,CAAD,IAAOA,CAAC,CAACnC,UAAF,CAAa,GAAb,CAFF,EAGZM,MAHY,CAGgB,CAACC,GAAD,EAAM4B,CAAN,KAAY;AACvC,gBAAME,KAAK,GAAGD,aAAa,CAACD,CAAD,CAA3B;;AAEA,cAAIE,KAAJ,EAAW;AAAA;;AACT,kBAAM9C,GAAG,GAAG4C,CAAC,CAACjE,OAAF,CAAU,IAAV,EAAgB,EAAhB,EAAoBA,OAApB,CAA4B,KAA5B,EAAmC,EAAnC,CAAZ;AACAqC,YAAAA,GAAG,CAAChB,GAAD,CAAH,GAAW,iBAAAiB,MAAM,CAACU,KAAP,wDAAe3B,GAAf,IAAsBiB,MAAM,CAACU,KAAP,CAAa3B,GAAb,EAAkB8C,KAAlB,CAAtB,GAAiDA,KAA5D;AACD;;AAED,iBAAO9B,GAAP;AACD,SAZY,EAYV,EAZU,CAAf;;AAcA,YAAIvB,MAAM,IAAIK,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBD,MAAlC,EAA0C;AACxC,iBAAO;AAAEF,YAAAA,IAAF;AAAQG,YAAAA;AAAR,WAAP;AACD;;AAED,eAAO;AAAEH,UAAAA;AAAF,SAAP;AACD,OArBQ,CAAT;AAuBAwC,MAAAA,aAAa,GAAGA,aAAa,CAACnD,OAAd,CAAsB4C,KAAK,CAAC,CAAD,CAA3B,EAAgC,EAAhC,CAAhB;AAEA;AACD;AACF;;AAED,SAAO;AAAEzC,IAAAA,MAAF;AAAUgD,IAAAA;AAAV,GAAP;AACD,CAxDD;;AA0DA,MAAM7B,uBAAuB,GAAG,CAC9B9B,MAD8B,EAE9BuD,MAF8B,EAG9BqB,WAH8B,EAI9BzC,UAAoB,GAAG,EAJO,EAK9B0C,QAL8B,EAM9BxE,aAN8B,EAO9ByE,aAP8B,KAQZ;AAClB,QAAMrD,OAAsB,GAAG,EAA/B;AAEAU,EAAAA,UAAU,CAAC/B,IAAX,CAAgBmD,MAAhB;AAEAlD,EAAAA,aAAa,CAACD,IAAd,CAAmBmD,MAAnB;AAEA,QAAMT,MAAM,GAAG8B,WAAW,CAACrB,MAAD,CAA1B;;AAEA,MAAI,OAAOT,MAAP,KAAkB,QAAtB,EAAgC;AAC9B;AACA,UAAMZ,OAAO,GAAG4C,aAAa,GAAGP,SAAS,CAACO,aAAD,EAAgBhC,MAAhB,CAAZ,GAAsCA,MAAnE;AAEArB,IAAAA,OAAO,CAACrB,IAAR,CAAa2E,gBAAgB,CAAC/E,MAAD,EAASuD,MAAT,EAAiBpB,UAAjB,EAA6BD,OAA7B,EAAsCY,MAAtC,CAA7B;AACD,GALD,MAKO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACrC,QAAIZ,OAAJ,CADqC,CAGrC;AACA;AACA;;AACA,QAAI,OAAOY,MAAM,CAAChD,IAAd,KAAuB,QAA3B,EAAqC;AACnC,UAAIE,MAAJ,EAAY;AACVkC,QAAAA,OAAO,GACLY,MAAM,CAACkC,KAAP,KAAiB,IAAjB,IAAyBF,aAAzB,GACIP,SAAS,CAACO,aAAD,EAAgBhC,MAAM,CAAChD,IAAvB,CADb,GAEIgD,MAAM,CAAChD,IAHb;AAID,OALD,MAKO;AACL,YAAIgD,MAAM,CAACkC,KAAP,IAAgBlC,MAAM,CAAChD,IAAP,KAAgBY,SAApC,EAA+C;AAC7C,gBAAM,IAAIwC,KAAJ,CACJ,sJADI,CAAN;AAGD;;AAEDhB,QAAAA,OAAO,GACLY,MAAM,CAACkC,KAAP,KAAiB,IAAjB,GACIT,SAAS,CAACO,aAAa,IAAI,EAAlB,EAAsBhC,MAAM,CAAChD,IAAP,IAAe,EAArC,CADb,GAEIgD,MAAM,CAAChD,IAAP,IAAe,EAHrB;AAID;;AAED2B,MAAAA,OAAO,CAACrB,IAAR,CACE2E,gBAAgB,CACd/E,MADc,EAEduD,MAFc,EAGdpB,UAHc,EAIdD,OAJc,EAKdY,MAAM,CAAChD,IALO,EAMdgD,MAAM,CAACU,KANO,CADlB;AAUD;;AAED,QAAIV,MAAM,CAACxC,OAAX,EAAoB;AAClB;AACA,UAAIwC,MAAM,CAAC3C,gBAAX,EAA6B;AAC3B0E,QAAAA,QAAQ,CAACzE,IAAT,CAAc;AACZD,UAAAA,gBAAgB,EAAE2C,MAAM,CAAC3C,gBADb;AAEZE,UAAAA;AAFY,SAAd;AAID;;AAEDsB,MAAAA,MAAM,CAACC,IAAP,CAAYkB,MAAM,CAACxC,OAAnB,EAA4B2E,OAA5B,CAAqCC,YAAD,IAAkB;AAAA;;AACpD,cAAMzB,MAAM,GAAG3B,uBAAuB,CACpC9B,MADoC,EAEpCkF,YAFoC,EAGpCpC,MAAM,CAACxC,OAH6B,EAIpC6B,UAJoC,EAKpC0C,QALoC,EAMpC,CAAC,GAAGxE,aAAJ,CANoC,cAOpC6B,OAPoC,+CAOzB4C,aAPyB,CAAtC;AAUArD,QAAAA,OAAO,CAACrB,IAAR,CAAa,GAAGqD,MAAhB;AACD,OAZD;AAaD;AACF;;AAEDtB,EAAAA,UAAU,CAACgD,GAAX;AAEA,SAAO1D,OAAP;AACD,CAvFD;;AAyFA,MAAMsD,gBAAgB,GAAG,CACvB/E,MADuB,EAEvBuD,MAFuB,EAGvBpB,UAHuB,EAIvBD,OAJuB,EAKvBpC,IALuB,EAMvB0D,KANuB,KAOP;AAChB;AACAtB,EAAAA,OAAO,GAAGA,OAAO,CAACtB,KAAR,CAAc,GAAd,EAAmBC,MAAnB,CAA0BC,OAA1B,EAAmCsB,IAAnC,CAAwC,GAAxC,CAAV;AAEA,QAAMyB,KAAK,GAAG3B,OAAO,GACjB,IAAI4B,MAAJ,aACO5B,OAAO,CACTtB,KADE,CACI,GADJ,EAEFG,GAFE,CAEGkC,EAAD,IAAQ;AACX,QAAIjD,MAAM,IAAIiD,EAAE,KAAK,GAArB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CACJ,oJADI,CAAN;AAGD;;AAED,QAAID,EAAE,CAACX,UAAH,CAAc,GAAd,CAAJ,EAAwB;AACtB,kCAAqBW,EAAE,CAACxC,QAAH,CAAY,GAAZ,IAAmB,GAAnB,GAAyB,EAA9C;AACD;;AAED,qBAAUwC,EAAE,KAAK,GAAP,GAAa,IAAb,GAAoBvD,MAAM,CAACuD,EAAD,CAApC;AACD,GAdE,EAeFb,IAfE,CAeG,EAfH,CADP,OADiB,GAmBjB1B,SAnBJ;AAqBA,SAAO;AACL6C,IAAAA,MADK;AAELM,IAAAA,KAFK;AAGL3B,IAAAA,OAHK;AAILpC,IAAAA,IAJK;AAKL;AACAqC,IAAAA,UAAU,EAAE,CAAC,GAAGA,UAAJ,CANP;AAOLqB,IAAAA;AAPK,GAAP;AASD,CAzCD;;AA2CA,MAAMc,uBAAuB,GAAG,CAC9Bc,SAD8B,EAE9BC,UAF8B,KAGF;AAC5B,OAAK,MAAMvC,MAAX,IAAqBuC,UAArB,EAAiC;AAC/B,QAAID,SAAS,KAAKtC,MAAM,CAACX,UAAP,CAAkBW,MAAM,CAACX,UAAP,CAAkBd,MAAlB,GAA2B,CAA7C,CAAlB,EAAmE;AACjE,aAAOyB,MAAM,CAACU,KAAd;AACD;AACF;;AAED,SAAO9C,SAAP;AACD,CAXD,C,CAaA;;;AACA,MAAM4E,gBAAgB,GAAG,CACvBF,SADuB,EAEvB/E,aAFuB,EAGvBH,aAHuB,KAIA;AACvB,OAAK,MAAM4C,MAAX,IAAqB5C,aAArB,EAAoC;AAClC,QAAIG,aAAa,CAACgB,MAAd,KAAyByB,MAAM,CAACzC,aAAP,CAAqBgB,MAAlD,EAA0D;AACxD,UAAIkE,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAItE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,aAAa,CAACgB,MAAlC,EAA0CJ,CAAC,EAA3C,EAA+C;AAC7C,YAAIZ,aAAa,CAACY,CAAD,CAAb,CAAiBoB,aAAjB,CAA+BS,MAAM,CAACzC,aAAP,CAAqBY,CAArB,CAA/B,MAA4D,CAAhE,EAAmE;AACjEsE,UAAAA,WAAW,GAAG,KAAd;AACA;AACD;AACF;;AACD,UAAIA,WAAJ,EAAiB;AACf,eAAOH,SAAS,KAAKtC,MAAM,CAAC3C,gBAArB,GACH2C,MAAM,CAAC3C,gBADJ,GAEHO,SAFJ;AAGD;AACF;AACF;;AACD,SAAOA,SAAP;AACD,CAtBD,C,CAwBA;AACA;;;AACA,MAAM8E,iBAAiB,GAAG,CACxBC,YADwB,EAExBrB,KAFwB,EAGxBsB,OAHwB,KAIP;AACjB,MAAIA,OAAJ,EAAa;AACX,QAAID,YAAJ,EAAkB;AAChB,aAAO;AACLtB,QAAAA,KAAK,EAAE,CADF;AAELxD,QAAAA,MAAM,EAAE,CAAC;AAAEQ,UAAAA,IAAI,EAAEsE;AAAR,SAAD,EAAyBrB,KAAzB;AAFH,OAAP;AAID,KALD,MAKO;AACL,aAAO;AACLzD,QAAAA,MAAM,EAAE,CAACyD,KAAD;AADH,OAAP;AAGD;AACF,GAXD,MAWO;AACL,QAAIqB,YAAJ,EAAkB;AAChB,aAAO;AACLtB,QAAAA,KAAK,EAAE,CADF;AAELxD,QAAAA,MAAM,EAAE,CAAC;AAAEQ,UAAAA,IAAI,EAAEsE;AAAR,SAAD,EAAyB,EAAE,GAAGrB,KAAL;AAAYF,UAAAA,KAAK,EAAE;AAAEvD,YAAAA,MAAM,EAAE;AAAV;AAAnB,SAAzB;AAFH,OAAP;AAID,KALD,MAKO;AACL,aAAO;AACLA,QAAAA,MAAM,EAAE,CAAC,EAAE,GAAGyD,KAAL;AAAYF,UAAAA,KAAK,EAAE;AAAEvD,YAAAA,MAAM,EAAE;AAAV;AAAnB,SAAD;AADH,OAAP;AAGD;AACF;AACF,CA5BD;;AA8BA,MAAMa,uBAAuB,GAAG,CAC9Bb,MAD8B,EAE9BT,aAF8B,KAG3B;AACH,MAAIgE,KAAJ;AACA,MAAIE,KAAK,GAAGzD,MAAM,CAACsD,KAAP,EAAZ;AACA,QAAM5D,aAAuB,GAAG,EAAhC;AAEA,MAAIoF,YAAY,GAAGH,gBAAgB,CAAClB,KAAK,CAACjD,IAAP,EAAad,aAAb,EAA4BH,aAA5B,CAAnC;AAEAG,EAAAA,aAAa,CAACD,IAAd,CAAmBgE,KAAK,CAACjD,IAAzB;AAEA+C,EAAAA,KAAK,GAAGsB,iBAAiB,CAACC,YAAD,EAAerB,KAAf,EAAsBzD,MAAM,CAACU,MAAP,KAAkB,CAAxC,CAAzB;;AAEA,MAAIV,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;AACrB,QAAIsE,WAAW,GAAGzB,KAAlB;;AAEA,WAAQE,KAAK,GAAGzD,MAAM,CAACsD,KAAP,EAAhB,EAAgD;AAC9CwB,MAAAA,YAAY,GAAGH,gBAAgB,CAAClB,KAAK,CAACjD,IAAP,EAAad,aAAb,EAA4BH,aAA5B,CAA/B;AAEA,YAAM0F,gBAAgB,GACpBD,WAAW,CAACxB,KAAZ,IAAqBwB,WAAW,CAAChF,MAAZ,CAAmBU,MAAnB,GAA4B,CADnD;AAGAsE,MAAAA,WAAW,CAAChF,MAAZ,CAAmBiF,gBAAnB,EAAqC1B,KAArC,GAA6CsB,iBAAiB,CAC5DC,YAD4D,EAE5DrB,KAF4D,EAG5DzD,MAAM,CAACU,MAAP,KAAkB,CAH0C,CAA9D;;AAMA,UAAIV,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;AACrBsE,QAAAA,WAAW,GAAGA,WAAW,CAAChF,MAAZ,CAAmBiF,gBAAnB,EACX1B,KADH;AAED;;AAED7D,MAAAA,aAAa,CAACD,IAAd,CAAmBgE,KAAK,CAACjD,IAAzB;AACD;AACF;;AAED,SAAO+C,KAAP;AACD,CAvCD;;AAyCA,MAAMG,gBAAgB,GAAIH,KAAD,IAAyB;AAAA;;AAChD,MAAIR,OAAiC,GAAGQ,KAAxC;;AAEA,sBAAOR,OAAP,sCAAO,UAAS/C,MAAT,CAAgB+C,OAAO,CAACS,KAAR,IAAiB,CAAjC,EAAoCD,KAA3C,EAAkD;AAAA;;AAChD;AACAR,IAAAA,OAAO,GAAGA,OAAO,CAAC/C,MAAR,CAAe+C,OAAO,CAACS,KAAR,IAAiB,CAAhC,EAAmCD,KAA7C;AACD;;AAED,QAAME,KAAK,GAAIV,OAAD,CAA2C/C,MAA3C,CACZ,cAAA+C,OAAO,UAAP,8CAASS,KAAT,KAAkB,CADN,CAAd;AAIA,SAAOC,KAAP;AACD,CAbD;;AAeA,MAAM7C,gBAAgB,GAAG,CACvBzB,IADuB,EAEvB+F,WAFuB,KAGpB;AACH,QAAMC,KAAK,GAAGhG,IAAI,CAACc,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAd;AACA,QAAMU,MAAM,GAAG3B,WAAW,CAAC6D,KAAZ,CAAkBsC,KAAlB,CAAf;;AAEA,MAAID,WAAJ,EAAiB;AACflE,IAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoB2D,OAApB,CAA6B9D,IAAD,IAAU;AACpC,UAAI0E,WAAW,CAAC1E,IAAD,CAAX,IAAqB,OAAOG,MAAM,CAACH,IAAD,CAAb,KAAwB,QAAjD,EAA2D;AACzDG,QAAAA,MAAM,CAACH,IAAD,CAAN,GAAe0E,WAAW,CAAC1E,IAAD,CAAX,CAAkBG,MAAM,CAACH,IAAD,CAAxB,CAAf;AACD;AACF,KAJD;AAKD;;AAED,SAAOQ,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBD,MAApB,GAA6BC,MAA7B,GAAsCZ,SAA7C;AACD,CAhBD","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]}