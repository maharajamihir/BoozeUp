{"version":3,"sources":["useDescriptors.tsx"],"names":["useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","React","useState","onDispatchAction","onOptionsChange","useContext","NavigationBuilderContext","context","useMemo","navigations","routes","reduce","acc","route","i","screen","name","key","routeOptions","mergedOptions","clearOptions","o","_","rest","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: routeOptions,\n          })\n        : defaultScreenOptions),\n      ...routeOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]}