{"version":3,"sources":["NativeStackView.tsx"],"names":["StackActions","useTheme","React","Platform","StyleSheet","View","AppContainer","warnOnce","Screen","ScreenComponent","ScreenStack","HeaderConfig","isAndroid","OS","Container","__DEV__","DebugContainer","props","stackPresentation","rest","MaybeNestedStack","options","route","children","colors","headerShown","contentStyle","isHeaderInModal","headerShownPreviousRef","useRef","useEffect","current","name","content","styles","container","backgroundColor","background","absoluteFill","NativeStackView","state","navigation","descriptors","key","routes","map","index","render","renderScene","gestureEnabled","replaceAnimation","screenOrientation","stackAnimation","statusBarAnimation","statusBarColor","statusBarHidden","statusBarStyle","statusBarTranslucent","isHeaderInPush","emit","type","data","closing","target","e","dismissCount","nativeEvent","dispatch","pop","source","create","flex"],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View, ViewProps } from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport warnOnce from 'warn-once';\nimport {\n  Screen as ScreenComponent,\n  ScreenProps,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport HeaderConfig from './HeaderConfig';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\nconst isAndroid = Platform.OS === 'android';\n\nlet Container = View;\n\nif (__DEV__) {\n  const DebugContainer = (\n    props: ViewProps & { stackPresentation: StackPresentationTypes }\n  ) => {\n    const { stackPresentation, ...rest } = props;\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n    return <View {...rest} />;\n  };\n  // @ts-ignore Wrong props\n  Container = DebugContainer;\n}\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  stackPresentation,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  stackPresentation: StackPresentationTypes;\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : stackPresentation !== 'push' && headerShown === true;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        stackPresentation !== 'push' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, stackPresentation, route.name]);\n\n  const content = (\n    <Container\n      style={[\n        styles.container,\n        stackPresentation !== 'transparentModal' &&\n          stackPresentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      // @ts-ignore Wrong props passed to View\n      stackPresentation={stackPresentation}>\n      {children}\n    </Container>\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderConfig {...options} route={route} />\n          {content}\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props): JSX.Element {\n  const { key, routes } = state;\n\n  return (\n    <ScreenStack style={styles.container}>\n      {routes.map((route, index) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          headerShown,\n          replaceAnimation = 'pop',\n          screenOrientation,\n          stackAnimation,\n          statusBarAnimation,\n          statusBarColor,\n          statusBarHidden,\n          statusBarStyle,\n          statusBarTranslucent,\n        } = options;\n\n        let { stackPresentation = 'push' } = options;\n\n        if (index === 0) {\n          // first screen should always be treated as `push`, it resolves problems with no header animation\n          // for navigator with first screen as `modal` and the next as `push`\n          stackPresentation = 'push';\n        }\n\n        const isHeaderInPush = isAndroid\n          ? headerShown\n          : stackPresentation === 'push' && headerShown !== false;\n\n        return (\n          <Screen\n            key={route.key}\n            enabled\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={isAndroid ? false : gestureEnabled}\n            replaceAnimation={replaceAnimation}\n            screenOrientation={screenOrientation}\n            stackAnimation={stackAnimation}\n            stackPresentation={stackPresentation}\n            statusBarAnimation={statusBarAnimation}\n            statusBarColor={statusBarColor}\n            statusBarHidden={statusBarHidden}\n            statusBarStyle={statusBarStyle}\n            statusBarTranslucent={statusBarTranslucent}\n            onWillAppear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={(e) => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              const dismissCount =\n                e.nativeEvent.dismissCount > 0 ? e.nativeEvent.dismissCount : 1;\n\n              navigation.dispatch({\n                ...StackActions.pop(dismissCount),\n                source: route.key,\n                target: key,\n              });\n            }}>\n            <HeaderConfig\n              {...options}\n              route={route}\n              headerShown={isHeaderInPush}\n            />\n            <MaybeNestedStack\n              options={options}\n              route={route}\n              stackPresentation={stackPresentation}>\n              {renderScene()}\n            </MaybeNestedStack>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}