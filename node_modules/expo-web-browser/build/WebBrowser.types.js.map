{"version":3,"file":"WebBrowser.types.js","sourceRoot":"","sources":["../src/WebBrowser.types.ts"],"names":[],"mappings":"AAgEA,MAAM,CAAN,IAAY,oBAcX;AAdD,WAAY,oBAAoB;IAC9B;;OAEG;IACH,yCAAiB,CAAA;IACjB;;OAEG;IACH,2CAAmB,CAAA;IACnB;;OAEG;IACH,yCAAiB,CAAA;IACjB,yCAAiB,CAAA;AACnB,CAAC,EAdW,oBAAoB,KAApB,oBAAoB,QAc/B","sourcesContent":["export type RedirectEvent = {\n  url: string;\n};\n\nexport type WebBrowserWindowFeatures = Record<string, number | boolean | string>;\n\nexport type WebBrowserOpenOptions = {\n  /**\n   * Color of the toolbar in either #AARRGGBB or #RRGGBB format.\n   */\n  toolbarColor?: string;\n  browserPackage?: string;\n  /**\n   * Whether the toolbar should be hiding when a user scrolls the website.\n   */\n  enableBarCollapsing?: boolean;\n\n  /** Android only */\n\n  /**\n   * Color of the secondary toolbar in either #AARRGGBB or #RRGGBB format.\n   */\n  secondaryToolbarColor?: string;\n  /**\n   * Whether the browser should show the title of website on the toolbar.\n   */\n  showTitle?: boolean;\n  enableDefaultShareMenuItem?: boolean;\n  /**\n   * Whether browsed website should be shown as separate entry in Android recents/multitasking view.\n   * Requires createTask to be `true` (default).\n   * Default: `false`\n   */\n  showInRecents?: boolean;\n  /**\n   * Whether the browser should open as a new task or open within the existing task.\n   * Default: `true`\n   */\n  createTask?: boolean;\n\n  /** iOS only */\n  controlsColor?: string;\n  dismissButtonStyle?: 'done' | 'close' | 'cancel';\n  readerMode?: boolean;\n\n  /**\n   * **Web:** name to assign to the popup window.\n   */\n  windowName?: string;\n  /**\n   * **Web:** features to use with `window.open()`\n   */\n  windowFeatures?: string | WebBrowserWindowFeatures;\n};\n\nexport type WebBrowserAuthSessionResult = WebBrowserRedirectResult | WebBrowserResult;\n\nexport type WebBrowserCustomTabsResults = {\n  defaultBrowserPackage?: string;\n  preferredBrowserPackage?: string;\n  browserPackages: string[];\n  servicePackages: string[];\n};\n\nexport enum WebBrowserResultType {\n  /**\n   * iOS only\n   */\n  CANCEL = 'cancel',\n  /**\n   * iOS only\n   */\n  DISMISS = 'dismiss',\n  /**\n   * Android only\n   */\n  OPENED = 'opened',\n  LOCKED = 'locked',\n}\n\nexport type WebBrowserResult = {\n  // cancel and dismiss are iOS only, opened is Android only\n  type: WebBrowserResultType;\n};\n\nexport type WebBrowserRedirectResult = {\n  type: 'success';\n  url: string;\n};\n\nexport type ServiceActionResult = {\n  servicePackage?: string;\n};\n\nexport type WebBrowserMayInitWithUrlResult = ServiceActionResult;\nexport type WebBrowserWarmUpResult = ServiceActionResult;\nexport type WebBrowserCoolDownResult = ServiceActionResult;\n"]}